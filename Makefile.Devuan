SHELL = /bin/bash

include Makefile.config

${TARGET_IMG}:
	truncate -s 3814MiB ${TARGET_IMG}  # fit on 4GB card
	/sbin/parted ${TARGET_IMG} --script mklabel msdos
	/sbin/parted ${TARGET_IMG} --script mkpart primary ext2 5MiB 512MiB  # boot
	/sbin/parted ${TARGET_IMG} --script mkpart primary 512MiB 100%       # encrypted LVM

mount:
	sudo /sbin/kpartx -as ${TARGET_IMG}
	@$(eval LOOPMAP=$(shell sudo /sbin/kpartx -l ${TARGET_IMG} | sed -ne 's/^\(loop[^p]*\)p.*/\1/; 1p' ))
	mkdir -p rootfs
	sudo /sbin/cryptsetup open --type luks --key-file ${KEYFILE} /dev/mapper/${LOOPMAP}p2 ${LUKSMAP} || \
		sudo /sbin/cryptsetup open --type luks /dev/mapper/${LOOPMAP}p2 ${LUKSMAP}
	sudo /sbin/vgchange -ay ${VGNAME}
	sudo mount -t ext4 /dev/mapper/${VGNAME}-root rootfs/
	sudo mount -t ext4 /dev/mapper/${LOOPMAP}p1 rootfs/boot
	sudo mount -t ext4 /dev/mapper/${VGNAME}-home rootfs/home
	sudo mount --bind /dev rootfs/dev
	sudo mount --bind /dev/pts rootfs/dev/pts
	sudo mount --bind /proc rootfs/proc
	sudo mount --bind /sys rootfs/sys

umount:
	-sudo umount rootfs/boot
	-sudo umount rootfs/home
	-sudo umount rootfs/dev/pts
	-sudo umount rootfs/dev
	-sudo umount rootfs/proc
	-sudo umount rootfs/sys
	-sudo umount rootfs
	-sudo /sbin/vgchange -an ${VGNAME}
	-sudo /sbin/cryptsetup close /dev/mapper/${LUKSMAP}
	-sudo /sbin/kpartx -d ${TARGET_IMG}

devuan: ${TARGET_IMG}
	@# setup partitions
	sudo /sbin/kpartx -as ${TARGET_IMG}
	@$(eval LOOPMAP=$(shell sudo /sbin/kpartx -l ${TARGET_IMG} | sed -ne 's/^\(loop[^p]*\)p.*/\1/; 1p' ))
	@# create LUKS
	@bash -c "if [ ! -f ${KEYFILE} ]; then sudo touch ${KEYFILE}; sudo chmod 0600 ${KEYFILE}; sudo dd if=/dev/urandom of=${KEYFILE} bs=1024 count=4; fi"
	@# overwrite partition with random
	sudo /sbin/cryptsetup open --type plain --key-file /dev/urandom /dev/mapper/${LOOPMAP}p2 ${LUKSMAP}
	@# Note: estimated size hardcoded based on truncate to 3814MiB above and parted "mkpart primary 512MiB 100%"
	bash -c "pv -petrabS -s 3462397952 /dev/zero | sudo dd of=/dev/mapper/${LUKSMAP}"
	sync
	sudo /sbin/cryptsetup close /dev/mapper/${LUKSMAP}
	sudo /sbin/cryptsetup --batch-mode luksFormat /dev/mapper/${LOOPMAP}p2 ${KEYFILE}
	sudo /sbin/cryptsetup open --type luks --key-file ${KEYFILE} /dev/mapper/${LOOPMAP}p2 ${LUKSMAP}
	@# create LVM
	sudo /sbin/pvcreate /dev/mapper/${LUKSMAP}
	sudo /sbin/vgcreate ${VGNAME} /dev/mapper/${LUKSMAP}
	sudo /sbin/lvcreate --size 2G --name root ${VGNAME}
	sudo /sbin/lvcreate --size 1G --name home ${VGNAME}
	@# format partitions
	sudo /sbin/mkfs.ext4 -L UAboot ${EXT4WITHOUTJOURNAL} -F /dev/mapper/${LOOPMAP}p1
	sudo /sbin/mkfs.ext4 -L UAroot ${EXT4WITHOUTJOURNAL} -F /dev/mapper/${VGNAME}-root
	sudo /sbin/mkfs.ext4 -L UAhome ${EXT4WITHOUTJOURNAL} -F /dev/mapper/${VGNAME}-home
	# mount
	mkdir -p rootfs
	sudo mount -t ext4 /dev/mapper/${VGNAME}-root rootfs/
	sudo mkdir -p rootfs/boot
	sudo mkdir -p rootfs/home
	sudo mount -t ext4 /dev/mapper/${LOOPMAP}p1 rootfs/boot
	sudo mount -t ext4 /dev/mapper/${VGNAME}-home rootfs/home
	@# debootstrap
	sudo /usr/sbin/qemu-debootstrap --arch=armhf --include=${PKGS2BOOTSTRAP_DEVUAN} jessie rootfs http://${APTCACHERNGURL}auto.mirror.devuan.org/merged/
	sudo cp conf/rc.local rootfs/etc/rc.local
	sudo cp conf/sources.list rootfs/etc/apt/sources.list
	sudo cp conf/dhcpd.conf rootfs/etc/dhcp/dhcpd.conf
	sudo sed -i -e 's/INTERFACES=""/INTERFACES="usb0"/' rootfs/etc/default/isc-dhcp-server
	echo "tmpfs /tmp tmpfs defaults 0 0" | sudo tee rootfs/etc/fstab
	echo -e "\nUseDNS no" | sudo tee -a rootfs/etc/ssh/sshd_config
	echo "nameserver 8.8.8.8" | sudo tee rootfs/etc/resolv.conf
	sudo chroot rootfs systemctl mask getty-static.service
	sudo chroot rootfs systemctl mask display-manager.service
	sudo chroot rootfs systemctl mask hwclock-save.service
	echo "ledtrig_heartbeat" | sudo tee -a rootfs/etc/modules
	echo "ci_hdrc_imx" | sudo tee -a rootfs/etc/modules
	echo "g_ether" | sudo tee -a rootfs/etc/modules
	echo "options g_ether use_eem=0 dev_addr=1a:55:89:a2:69:41 host_addr=1a:55:89:a2:69:42" | sudo tee -a rootfs/etc/modprobe.d/usbarmory.conf
	echo -e 'auto usb0\nallow-hotplug usb0\niface usb0 inet static\n  address 10.0.0.1\n  netmask 255.255.255.0\n  gateway 10.0.0.2'| sudo tee -a rootfs/etc/network/interfaces
	echo "usbarmory" | sudo tee rootfs/etc/hostname
	echo "usbarmory  ALL=(ALL) NOPASSWD: ALL" | sudo tee -a rootfs/etc/sudoers
	echo -e "127.0.1.1\tusbarmory" | sudo tee -a rootfs/etc/hosts
	sudo chroot rootfs /usr/sbin/useradd -s /bin/bash -p `sudo chroot rootfs mkpasswd -m sha-512 usbarmory` -m usbarmory
	sudo rm rootfs/etc/ssh/ssh_host_*
	sudo chroot rootfs apt-get clean
	sudo chroot rootfs fake-hwclock
	sudo rm rootfs/usr/bin/qemu-arm-static

linux-${LINUX_VER}.tar.xz:
	wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-${LINUX_VER}.tar.xz -O linux-${LINUX_VER}.tar.xz
	wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-${LINUX_VER}.tar.sign -O linux-${LINUX_VER}.tar.sign

u-boot-${UBOOT_VER}.tar.bz2:
	wget ftp://ftp.denx.de/pub/u-boot/u-boot-${UBOOT_VER}.tar.bz2 -O u-boot-${UBOOT_VER}.tar.bz2
	wget ftp://ftp.denx.de/pub/u-boot/u-boot-${UBOOT_VER}.tar.bz2.sig -O u-boot-${UBOOT_VER}.tar.bz2.sig

linux-${LINUX_VER}/arch/arm/boot/zImage: linux-${LINUX_VER}.tar.xz
	unxz --keep linux-${LINUX_VER}.tar.xz
	gpg --verify linux-${LINUX_VER}.tar.sign
	tar xvf linux-${LINUX_VER}.tar && cd linux-${LINUX_VER}
	wget ${USBARMORY_REPO}/software/kernel_conf/usbarmory_linux-4.9.config -O linux-${LINUX_VER}/.config
	wget ${USBARMORY_REPO}/software/kernel_conf/imx53-usbarmory-host.dts -O linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory-host.dts
	wget ${USBARMORY_REPO}/software/kernel_conf/imx53-usbarmory-gpio.dts -O linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory-gpio.dts
	wget ${USBARMORY_REPO}/software/kernel_conf/imx53-usbarmory-spi.dts -O linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory-spi.dts
	wget ${USBARMORY_REPO}/software/kernel_conf/imx53-usbarmory-i2c.dts -O linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory-i2c.dts
	wget ${USBARMORY_REPO}/software/kernel_conf/imx53-usbarmory-scc2.dts -O linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory-scc2.dts
	cd linux-${LINUX_VER} && KBUILD_BUILD_USER=usbarmory KBUILD_BUILD_HOST=usbarmory ARCH=arm CROSS_COMPILE=arm-none-eabi- make -j${JOBS} zImage modules imx53-usbarmory.dtb imx53-usbarmory-host.dtb imx53-usbarmory-gpio.dtb imx53-usbarmory-spi.dtb imx53-usbarmory-i2c.dtb imx53-usbarmory-scc2.dtb

u-boot-${UBOOT_VER}/u-boot.imx: u-boot-${UBOOT_VER}.tar.bz2
	gpg --verify u-boot-${UBOOT_VER}.tar.bz2.sig
	tar xvf u-boot-${UBOOT_VER}.tar.bz2
	cd u-boot-${UBOOT_VER} && make distclean
	cd u-boot-${UBOOT_VER} && make usbarmory_config
	cd u-boot-${UBOOT_VER} && CROSS_COMPILE=arm-none-eabi- ARCH=arm make -j${JOBS}

mxc-scc2-master.zip:
	wget ${MXC_SCC2_REPO}/archive/master.zip -O mxc-scc2-master.zip
	unzip mxc-scc2-master

linux: linux-${LINUX_VER}/arch/arm/boot/zImage

u-boot: u-boot-${UBOOT_VER}/u-boot.imx

mxc-scc2: mxc-scc2-master.zip linux-${LINUX_VER}/arch/arm/boot/zImage
	cd mxc-scc2-master && make KBUILD_BUILD_USER=usbarmory KBUILD_BUILD_HOST=usbarmory ARCH=arm CROSS_COMPILE=arm-none-eabi- KERNEL_SRC=../linux-${LINUX_VER} -j${JOBS} all

finalize: ${TARGET_IMG} u-boot-${UBOOT_VER}/u-boot.imx linux-${LINUX_VER}/arch/arm/boot/zImage mxc-scc2
	sudo cp linux-${LINUX_VER}/arch/arm/boot/zImage rootfs/boot/
	sudo cp linux-${LINUX_VER}/arch/arm/boot/dts/imx53-usbarmory*.dtb rootfs/boot/
	cd linux-${LINUX_VER} && sudo make INSTALL_MOD_PATH=../rootfs ARCH=arm modules_install
	cd mxc-scc2-master && sudo make INSTALL_MOD_PATH=../rootfs ARCH=arm KERNEL_SRC=../linux-${LINUX_VER} modules_install
	sudo rm rootfs/lib/modules/${LINUX_VER}/build
	sudo rm rootfs/lib/modules/${LINUX_VER}/source
	sudo umount rootfs
	sudo dd if=u-boot-${UBOOT_VER}/u-boot.imx of=${TARGET_IMG} bs=512 seek=2 conv=fsync conv=notrunc
	xz -k ${TARGET_IMG}
	zip -j ${TARGET_IMG}.zip ${TARGET_IMG}

all: debian linux mxc-scc2 u-boot finalize

clean:
	-rm -r linux-${LINUX_VER}*
	-rm -r u-boot-${UBOOT_VER}*
	-rm -r mxc-scc2-master*
	-rm usbarmory-devuan_jessie-base_image-*.raw
	-rm usbarmory-debian_jessie-base_image-*.raw
	-rmdir rootfs
